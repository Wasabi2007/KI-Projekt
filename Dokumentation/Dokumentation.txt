Dokumentation des KI-Projekts: Behavior Tree-Creator mit Testfunktion in Unity

1. Motivation
2. Zielsetzung
2. Elemente
3. Umsetzung( z.b. entscheidungen, dass steerings im roboter.. ? uml?)
4. Anleitung



1. Motivation
1.1. Konzept

Das Projektziel ist es, einen Ingame-Editor für Behaviour Trees zu entwickeln, welcher Bäume erstellen, ändern, speichern und laden kann. Diese sind in Test-Roboter implementierbar, sodass Roboter mit unterschiedlichen Verhalten gegeneinander antreten können. Eine Eigenschaften des Editors ist, dass sich Behaviour Trees auch zur Laufzeit bearbeiten lassen, welche nach dem erneuten Speichern und Aktualisierung erneut Abrufbar ist. Behavior Trees lassen sich aus vorgefertigten Decorator-Elementen und Tasks zusammenstellen *??um in erster Linie einfache Verhaltensweisen abzubilden??*.

1.2. Entwicklungsumgebung

Das Projekt wird in der Spiele-Engine Unity umgesetzt, da es durch die bereits vorhandenen Funktionen und den großen Angebot an Erweiterungen eine Schnelle Entwicklung ermöglicht. Diese Entwicklungsumgebung erlaubt es beispielsweise, für das Vorhaben vorteilhafte Plugins zu installieren, in diesem konkreten Fall „NGUI“, um die Schaltflächen für die Bearbeitung der Behaviour Trees bereitzustellen, was durch Unity ohne diese Erweiterung in dieser Funktionalität  nur mit viel Aufwand und nicht in diesem Ausmaß möglich wäre. Außerdem wird die Engine durch das „Unity Serializer“-Plugin erweitert, welches die Speicherverwaltung der Bäume ermöglicht. 

Der Entwicklungsfokus liegt beim Editor für die Bäume und erst in zweiter Linie an der Testmöglichkeit durch die Roboter.

1.3. Zukunftsaussichten

Das Projekt soll eine Basis bieten auf der gegebenenfalls in späteren Projekten der Hochschule, wie zum Beispiel dem Medienprojekt oder dem interdisziplinären Teamprojekt, aufgebaut werden kann. Da nicht alle Punkte der Zielsetzung umgesetzt werden können gibt es Potenzial den Editor in Zukunft zu erweitern und/oder das Projekt in der Testmöglichkeit zu expandieren.

2. Zielsetzung
Die Erwartungen an das Projekt wurden in 3 Kategorien von Zielen unterteilt. Daher werden verschiedene Prioritäten in Abhängigkeit an die verbleibende Zeit des Projektes gesetzt.

Projektziele:

Muss-Ziele:
- Basisroboter(mit festen Attributwerten: Hp, Schussrate, Schaden, Munition, Schnelligkeit und entsprechenden Funktionen)
	- Einem Objekt der Klasse „Robot“ wird ein Steering-Type(steeringtype) zugewiesen. Die 	Funktionen zu den einzelnen Steering-Typen sind in der Robot-Klasse direkt implementiert. 
- Grundbehaviours(Flee, Seek, Attack, Wander)
- Veränderbarkeit von Tasks mit Attributen 
- Basiseditor(Bilden/Editieren, Speichern und Laden von Behaviour Trees)
- ?* Simple *? Elemente(Tasks) für den Editor
- Anzeige des aktuellen Status des ausgewählten Bahaviour Trees

Soll-Ziele:
- Erweiterter Editor(Baukastensystem für den Bau eines Bahaviour Trees)[]
- Testmöglichkeit verschiedener Behaviours durch „Roboter-Kampf“ (Interaktion zwischen zwei oder mehr Roboter-Objekte)
- Face-Only-Steering
- Ein Paar verschiedene vorgefertigte Behaviour Trees
- Save As-Button zum Speichern von Bäumen unter neuem Namen.
- Auswahlmöglichkeit für Trees/Roboter um den ausgeführten Baum anzeigen zu lassen
- Erweiterbarkeit des Task-Pools
- Angriff von Robotern durch schießen

Kann-Ziele:
- Schöne Grafiken
- Aufwändiges Design
- Mehr bzw. komplexere Tasks für vielfältige Behaviour Trees
- Behaviour Trees als Teilbäume in andere Bäume implementierbar machen

2.2. Umsetzung vll hier statt externer punkt!?(was wurde wie umgesetzt, was nicht und warum!? - problemstellungen)

3. Elemente
3.0. Maske?!

Die Maske enthält eine Toolbar welche am oberen Rand angebracht ist. Von Dort aus können die Aktionen wie Speichern, Laden und Erstellen für Behaviour Trees ausgewählt werden. Außerdem befindet sich in der Leiste ein Start-Button, welcher das aktuelle Szenario startet. In der rechten, oberen Ecke ist der Hide/Show-Button dafür verantwortlich, die Speicherverwaltung und den Editor auszublenden.
Auf der rechten Seite des Bildschirm ist ein Node-Editor, mit ein aktuell Fokusierter Knoten und dessen Unterknoten im Baum bearbeitet werden kann. Dieser lässt sich am rechten Rand bei Nichtgebrauch verstecken.
Das Mittelfenster ist der Bereich in welchem die Roboter interagieren und auch die Behaviour Trees und diverse Auswahlfenster angezeigt werden.

3.1. Editor

Sobald ein Element im aktuell angezeigten Behaviour Tree angeklickt wird, wird im Editor der aktuelle Knoten und dessen Unterknoten angezeigt. Über die Pfeile kann der aktuelle Knoten samt untergeordneten Elementen in der gleichen Hierarchie nach rechts oder links verschoben werden.
Des weiteren gibt es eine Suchleiste in der die Tasks für das Dropdown-Menü nebenan auf eine Auswahl limitiert werden können und durch Auswahl in der bereits genannten Liste als Unterknoten an das aktuelle Element angefügt werden. Die Unterknoten können durch einen Klick auf einen Entfernen-Button wieder aus dem Baum gelöscht werden.

3.2. Behaviour Tree

Der Baum taucht in der Mitte des Bildschirms auf. Dieser lässt sich durch das Gedrückthalten der Maustasten veschieben. Einzelne Elemente lassen sich durch einen kurzen Klick ansprechen. Insofern ein aktuelles Szenario abläuft und der Behaviour Tree aktiviert ist, wird der aktuelle Task samt Pfad im Baum farblich hervorgehoben.

3.3. Roboter

Roboter sind im Sichtfeld verteilt. In jeden Roboter kann ein bereits abgespeicherter Behaviour Tree geladen werden, indem durch das klicken auf einen Roboter eine Liste mit bereits abgelegten Bäumen erscheint und eine Auswahl getroffen werden kann. 

3.4. Task
Es gibt zwei Arten von Tasks. Zum einen die mit und zum anderen die ohne Parameter. 

4. Anleitung
Es gibt zwei verschiedene Modi, welche rechts oberen am Bildschirmrand gewechselt werden können. Das Programm startet im Show-Modus, was bedeutet, dass der Editor angezeigt wird. Dort können Bäume angelegt, bearbeitet und gespeichert werden. Im Hide-Modus können bereits abgespeicherte Bäume den Robotern zugewiesen werden, da der Editor versteckt wird.


Show – Editor ist eingeblendet
4.1. Anlegen [eines neuen Baumes]
Um einen neuen Baum zu erstellen wird der New-Button gedrückt. Daraufhin erscheint ein Fenster mit einer Liste. Dort wird der erste Knoten des Baumes ausgewählt.

4.2. Bearbeiten [eines Baumes]
Am rechten Rand verbirgt sich das Bearbeitungs-Menü. Mit einem Klick auf den schmalen Balken klappt sich dieses auf.

4.2.1. Knoten Auswählen
Mit einem Klick auf den zu bearbeitenden Knoten direkt im Baum dieser direkt ausgewählt und ist dadurch bearbeitbar.

4.2.2. Knoten verschieben
Direkt unter dem Namen des Knotens befindet sich deine Index-Position in der Reihe der Unterknoten. Mit einem Klick auf den Links- oder Rechts-Buttons wird der Knoten in der Reihe dementsprechend verschoben.

4.2.3. Knoten löschen
Um einen Knoten zu löschen wird der Vaterknoten dessen ausgewählt. Dort stehen die Kind-Knoten aufgelistet. Rechts neben den Namen dieser befindet sich der Löschen-Button. Durch das anklicken wird der Knoten aus der Liste der Kindknoten entfernt.

4.3. Speichern [eines Baumes]
4.3.1. Neuer Baum
Beim Speichern eines neuen Baumes wird in der Leiste am oberen Bildschirmrand der „Save As“-Button ausgewählt. Dadurch öffnet sich ein Fenster in welchem der 

4.3.2. Bereits vorhandener Baum
Wenn ein bereits gespeicherter Baum verändert wurde, kann der Fortschritt durch den Save-Button gesichert werden.

4.4. Laden [eines Baumes]
Über den Load-Button am oberen Bildschirmrand kann aus einer Liste der gespeicherten Bäume ausgewählt werden um diesen weiter zu editieren. 

4.5. Ablauf des Baumes verfolgen
Um den Ablauf eines Baumes sehen zu können, muss bereits mindestens ein Roboter mit einem Behaviour Tree ausgestattet sein. Beim Klick auf den Button mit der Aufschrift „None“ öffnet sich die Liste mit Robotern, welchen bereits ein Baum zugewiesen wurde. Sobald dort ein solcher ausgewählt ist, werden die anderen Funktionen des Show-Modus automatisch Deaktiviert und der zugehörige Baum taucht auf. Sobald das Szenario gestartet wird, werden aktuelle Pfade grün markiert.

Hide – Editor ist ausgeblendet
Um den Baum-Editor zu verstecken bzw. auszuschalten, wird der Hide-Button gedrückt.

4.5. Roboter einen Baum zuweisen
Mit dem Rechtsklick der Maus auf einen beliebigen Roboter erscheint die Liste von bereits gespeicherten Bäumen. Durch die Auswahl eines Baumes wird dieser dann dem Roboter zugeordnet.

Unabhängig von der Sichtbarkeit des Editors

4.6. Szenario Starten
Durch das Drücken des Start-Buttons beginnt das Szenario. Alle zugewiesenen Bäume werden automatisch aktiviert.

4.7. Szenario Zurücksetzen
Der Reset-Button kann jederzeit, während das Szenario läuft, gedrückt werden. Alle Roboter werden auf Ihre Anfangsposition samt deren Anfangs-Attributwerten zurückgesetzt. Die zugewiesenen Bäume bleiben nach dem Reset erhalten.



